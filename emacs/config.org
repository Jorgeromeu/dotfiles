#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Package initialization

Setting up package sources as well as =use-package=.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Basic editor settings

** Basic UI changes

Remove GUI elements and remove startup screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
#+END_SRC

Show text prompts instead of dialog popups

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Quality of life changes

Store registers on exit.

#+BEGIN_SRC emacs-lisp
(savehist-mode 1) 
(setq savehist-additional-variables '(register-alist))
#+END_SRC

Dont make backup files

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Use a visual bell rather than beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Make =Esc= quit prompts.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

Use system clipboard

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(setq mouse-yank-at-point t)
#+END_SRC

Increase undo limits

#+BEGIN_SRC emacs-lisp
(setq undo-limit 6710886400)
(setq undo-strong-limit 100663296)
(setq undo-outer-limit 1006632960)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 2)
(setq scroll-conservatively scroll-margin) 
(setq scroll-step 1)
(setq mouse-wheel-scroll-amount '(6 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-inhibit-click-time nil)
(setq scroll-preserve-screen-position t)
(setq scroll-error-top-bottom t)
(setq next-error-recenter (quote (4)))
(setq fast-but-imprecise-scrolling nil)
(setq jit-lock-defer-time 0)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(setq default-tab-width 4)
(setq tab-width 4)
(setq default-fill-column 80)
(setq fill-column 80)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default evil-shift-round nil)
#+END_SRC

** Line numbers

Enable line numbers globally

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
#+END_SRC

Disable line numbers on certain modes

#+BEGIN_SRC emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** UTF-8

ilways use UTF-8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8) 
(set-default-coding-systems 'utf-8) 
(set-terminal-coding-system 'utf-8) 
(set-keyboard-coding-system 'utf-8) 
(setq default-buffer-fle-coding-system 'utf-8) 
#+END_SRC

** Word wrapping

Disable word wrapping by default

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

* Aesthetics

Nord theme is my theme of choice.

#+BEGIN_SRC emacs-lisp
(use-package nord-theme)
(load-theme 'nord t)
#+END_SRC

The modeline being used is Doom Modeline, taken from doom emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom    
  (doom-modeline-height 25)
  (doom-modeline-bar-width 0)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-encoding t)
  (doom-modeline-indent-info nil)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-vcs-max-length 12)
  (doom-modeline-env-version t)
  (doom-modeline-irc-stylize 'identity)
  (doom-modeline-github-timer nil)
  (doom-modeline-gnus-timer nil))
#+END_SRC

Parenthesis options. Rainbow delimiters are used for clarity and matching parnes are highlighted.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(show-paren-mode 1)
(setq blink-matching-paren nil)
(setq show-paren-delay 0.2)
(setq show-paren-highlight-openparen t)
(setq show-paren-when-point-inside-paren t)
#+END_SRC

* IVY

Use IVY to autocomplete buffers, file search, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy)

#+END_SRC

* Evil mode

Vim emulation

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand t
  :init

  ;; See `undo-fu' package.
  (setq evil-undo-system 'undo-fu)

  :config
  (evil-mode)

  ;; use evil search
  (setq evil-search-module 'evil-search)
  (setq evil-ex-search-case 'sensitive))
#+END_SRC

Use vim-like undo

#+BEGIN_SRC emacs-lisp
(use-package undo-fu)
#+END_SRC

Emulate vims =C-a= and =C-x= for incrementing and decrementing numbers.

#+BEGIN_SRC emacs-lisp
;; increment and decrement numbers
; (use-package evil-numbers)
; (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
; (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+END_SRC

Emulate vim-surround

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :demand t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

Map insert mode =jj= to =Esc=

#+BEGIN_SRC emacs-lisp
(use-package key-chord)
(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)
#+END_SRC

Use =Spc= as a leader key.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
  (evil-set-leader '(normal) (kbd "<SPC>"))

  ;; Interactive file name search.
  (evil-define-key 'normal 'global (kbd "<leader>k") 'find-file-in-project)
  ;; Interactive file content search (git).
  (evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-git-grep)
  ;; Interactive current-file search.
  (evil-define-key 'normal 'global (kbd "<leader>s") 'swiper)
  ;; Interactive open-buffer switch.
  (evil-define-key 'normal 'global (kbd "<leader>b") 'counsel-switch-buffer))
#+END_SRC

* ORG

Change the icon for collapsed text

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-ellipsis " â–¾"
        org-hide-emphasis-markers t))
#+END_SRC

Make the header sizes be different from text sizes

#+BEGIN_SRC emacs-lisp
(dolist (face '((org-level-1 . 1.4)
              (org-level-2 . 1.3)
              (org-level-3 . 1.2)
              (org-level-4 . 1.1)
              (org-level-5 . 1.1)
              (org-level-6 . 1.1)
              (org-level-7 . 1.1)
              (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :weight 'bold :height (cdr face)))
#+END_SRC
